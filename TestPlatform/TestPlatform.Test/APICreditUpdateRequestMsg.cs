// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: APICreditUpdateRequestMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ctrade.Message {

  /// <summary>Holder for reflection information generated from APICreditUpdateRequestMsg.proto</summary>
  public static partial class APICreditUpdateRequestMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for APICreditUpdateRequestMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static APICreditUpdateRequestMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9BUElDcmVkaXRVcGRhdGVSZXF1ZXN0TXNnLnByb3RvEg5jdHJhZGUubWVz",
            "c2FnZRoOc3RhbmRhcmQucHJvdG8aDEhlYWRlci5wcm90bxoKVXNlci5wcm90",
            "byKiAQoLU2V0dGxlTGltaXQSGwoTc2V0dGxlX2xpbWl0X2Ftb3VudBgBIAEo",
            "CRITCgtzZXR0bGVfdHlwZRgCIAEoCRIfChdzZXR0bGVfbGltaXRfY2N5X2Ft",
            "b3VudBgDIAEoCRIhChlzZXR0bGVfdXRpbGl6YXRpb25fYW1vdW50GAQgASgJ",
            "Eh0KFXNldHRsZV9jdXJyZW50X2Ftb3VudBgFIAEoCSLWAgoLQ3JlZGl0TGlt",
            "aXQSFwoPb3Bwb25lbnRfb3JnX2lkGAEgAigJEhQKDGhhc19yZWxhdGlvbhgC",
            "IAEoBRIZChFyaXNrX2xpbWl0X2Ftb3VudBgDIAEoCRIRCglyaXNrX3Rlcm0Y",
            "BCABKAkSMgoNc2V0dGxlX2xpbWl0cxgFIAMoCzIbLmN0cmFkZS5tZXNzYWdl",
            "LlNldHRsZUxpbWl0EhoKEm9wcG9uZW50X29yZ19jbl9ubRgGIAEoCRIaChJv",
            "cHBvbmVudF9vcmdfZW5fbm0YByABKAkSHQoVcmlza19saW1pdF9jY3lfYW1v",
            "dW50GAggASgJEiUKHXJpc2tfbGltaXRfdXRpbGl6YXRpb25fYW1vdW50GAkg",
            "ASgJEiEKGXJpc2tfbGltaXRfY3VycmVudF9hbW91bnQYCiABKAkSFQoNYl9j",
            "bHJuZ19hbXRfZhgLIAEoBSKCAgoWQVBJQ3JlZGl0VXBkYXRlUmVxdWVzdBIZ",
            "ChFyaXNrX2xpbWl0X3JlcV9pZBgBIAIoCRIcChBtYXJrZXRfaW5kaWNhdG9y",
            "GAIgAigFOgIxMRIoChhpbnN0X3Njb3BlX3NlY3VyaXR5X3R5cGUYAyABKAk6",
            "BkZYU1dBUBIgChhyaXNrX2xpbWl0X3VwZGF0ZV9tZXRob2QYBCACKAUSLAoH",
            "Y3JlZGl0cxgFIAMoCzIbLmN0cmFkZS5tZXNzYWdlLkNyZWRpdExpbWl0EhEK",
            "CXRyYW5fdGltZRgGIAIoCRIiCgR1c2VyGGQgAigLMhQuY3RyYWRlLm1lc3Nh",
            "Z2UuVXNlciJ5ChlBUElDcmVkaXRVcGRhdGVSZXF1ZXN0TXNnEiYKBmhlYWRl",
            "chgBIAEoCzIWLmN0cmFkZS5tZXNzYWdlLkhlYWRlchI0CgRib2R5GAIgASgL",
            "MiYuY3RyYWRlLm1lc3NhZ2UuQVBJQ3JlZGl0VXBkYXRlUmVxdWVzdEJgCiBj",
            "bi5jb20uY2ZldHMuZGF0YS5jdHJhZGUubWVzc2FnZUIgQVBJQ3JlZGl0VXBh",
            "ZGF0ZVJlcXVlc3RNc2dQcm9idWaCtRgYQ1RSQURFLU9SREVSLURBVEEtU1VC",
            "TUlU"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::StandardReflection.Descriptor, global::Ctrade.Message.HeaderReflection.Descriptor, global::Ctrade.Message.UserReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.SettleLimit), global::Ctrade.Message.SettleLimit.Parser, new[]{ "SettleLimitAmount", "SettleType", "SettleLimitCcyAmount", "SettleUtilizationAmount", "SettleCurrentAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.CreditLimit), global::Ctrade.Message.CreditLimit.Parser, new[]{ "OpponentOrgId", "HasRelation", "RiskLimitAmount", "RiskTerm", "SettleLimits", "OpponentOrgCnNm", "OpponentOrgEnNm", "RiskLimitCcyAmount", "RiskLimitUtilizationAmount", "RiskLimitCurrentAmount", "BClrngAmtF" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.APICreditUpdateRequest), global::Ctrade.Message.APICreditUpdateRequest.Parser, new[]{ "RiskLimitReqId", "MarketIndicator", "InstScopeSecurityType", "RiskLimitUpdateMethod", "Credits", "TranTime", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.APICreditUpdateRequestMsg), global::Ctrade.Message.APICreditUpdateRequestMsg.Parser, new[]{ "Header", "Body" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SettleLimit : pb::IMessage<SettleLimit> {
    private static readonly pb::MessageParser<SettleLimit> _parser = new pb::MessageParser<SettleLimit>(() => new SettleLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SettleLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.APICreditUpdateRequestMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleLimit(SettleLimit other) : this() {
      settleLimitAmount_ = other.settleLimitAmount_;
      settleType_ = other.settleType_;
      settleLimitCcyAmount_ = other.settleLimitCcyAmount_;
      settleUtilizationAmount_ = other.settleUtilizationAmount_;
      settleCurrentAmount_ = other.settleCurrentAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SettleLimit Clone() {
      return new SettleLimit(this);
    }

    /// <summary>Field number for the "settle_limit_amount" field.</summary>
    public const int SettleLimitAmountFieldNumber = 1;
    private readonly static string SettleLimitAmountDefaultValue = "";

    private string settleLimitAmount_;
    /// <summary>
    //// 清算限额  11244 SettlLimitAmount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettleLimitAmount {
      get { return settleLimitAmount_ ?? SettleLimitAmountDefaultValue; }
      set {
        settleLimitAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "settle_limit_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettleLimitAmount {
      get { return settleLimitAmount_ != null; }
    }
    /// <summary>Clears the value of the "settle_limit_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettleLimitAmount() {
      settleLimitAmount_ = null;
    }

    /// <summary>Field number for the "settle_type" field.</summary>
    public const int SettleTypeFieldNumber = 2;
    private readonly static string SettleTypeDefaultValue = "";

    private string settleType_;
    /// <summary>
    //// 清算日期限 63 SettlType 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettleType {
      get { return settleType_ ?? SettleTypeDefaultValue; }
      set {
        settleType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "settle_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettleType {
      get { return settleType_ != null; }
    }
    /// <summary>Clears the value of the "settle_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettleType() {
      settleType_ = null;
    }

    /// <summary>Field number for the "settle_limit_ccy_amount" field.</summary>
    public const int SettleLimitCcyAmountFieldNumber = 3;
    private readonly static string SettleLimitCcyAmountDefaultValue = "";

    private string settleLimitCcyAmount_;
    /// <summary>
    //// 清算限额（百万人民币）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettleLimitCcyAmount {
      get { return settleLimitCcyAmount_ ?? SettleLimitCcyAmountDefaultValue; }
      set {
        settleLimitCcyAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "settle_limit_ccy_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettleLimitCcyAmount {
      get { return settleLimitCcyAmount_ != null; }
    }
    /// <summary>Clears the value of the "settle_limit_ccy_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettleLimitCcyAmount() {
      settleLimitCcyAmount_ = null;
    }

    /// <summary>Field number for the "settle_utilization_amount" field.</summary>
    public const int SettleUtilizationAmountFieldNumber = 4;
    private readonly static string SettleUtilizationAmountDefaultValue = "";

    private string settleUtilizationAmount_;
    /// <summary>
    //// 已占用清算限额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettleUtilizationAmount {
      get { return settleUtilizationAmount_ ?? SettleUtilizationAmountDefaultValue; }
      set {
        settleUtilizationAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "settle_utilization_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettleUtilizationAmount {
      get { return settleUtilizationAmount_ != null; }
    }
    /// <summary>Clears the value of the "settle_utilization_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettleUtilizationAmount() {
      settleUtilizationAmount_ = null;
    }

    /// <summary>Field number for the "settle_current_amount" field.</summary>
    public const int SettleCurrentAmountFieldNumber = 5;
    private readonly static string SettleCurrentAmountDefaultValue = "";

    private string settleCurrentAmount_;
    /// <summary>
    //// 当前可用额度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SettleCurrentAmount {
      get { return settleCurrentAmount_ ?? SettleCurrentAmountDefaultValue; }
      set {
        settleCurrentAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "settle_current_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSettleCurrentAmount {
      get { return settleCurrentAmount_ != null; }
    }
    /// <summary>Clears the value of the "settle_current_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSettleCurrentAmount() {
      settleCurrentAmount_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SettleLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SettleLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SettleLimitAmount != other.SettleLimitAmount) return false;
      if (SettleType != other.SettleType) return false;
      if (SettleLimitCcyAmount != other.SettleLimitCcyAmount) return false;
      if (SettleUtilizationAmount != other.SettleUtilizationAmount) return false;
      if (SettleCurrentAmount != other.SettleCurrentAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSettleLimitAmount) hash ^= SettleLimitAmount.GetHashCode();
      if (HasSettleType) hash ^= SettleType.GetHashCode();
      if (HasSettleLimitCcyAmount) hash ^= SettleLimitCcyAmount.GetHashCode();
      if (HasSettleUtilizationAmount) hash ^= SettleUtilizationAmount.GetHashCode();
      if (HasSettleCurrentAmount) hash ^= SettleCurrentAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasSettleLimitAmount) {
        output.WriteRawTag(10);
        output.WriteString(SettleLimitAmount);
      }
      if (HasSettleType) {
        output.WriteRawTag(18);
        output.WriteString(SettleType);
      }
      if (HasSettleLimitCcyAmount) {
        output.WriteRawTag(26);
        output.WriteString(SettleLimitCcyAmount);
      }
      if (HasSettleUtilizationAmount) {
        output.WriteRawTag(34);
        output.WriteString(SettleUtilizationAmount);
      }
      if (HasSettleCurrentAmount) {
        output.WriteRawTag(42);
        output.WriteString(SettleCurrentAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSettleLimitAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettleLimitAmount);
      }
      if (HasSettleType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettleType);
      }
      if (HasSettleLimitCcyAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettleLimitCcyAmount);
      }
      if (HasSettleUtilizationAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettleUtilizationAmount);
      }
      if (HasSettleCurrentAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SettleCurrentAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SettleLimit other) {
      if (other == null) {
        return;
      }
      if (other.HasSettleLimitAmount) {
        SettleLimitAmount = other.SettleLimitAmount;
      }
      if (other.HasSettleType) {
        SettleType = other.SettleType;
      }
      if (other.HasSettleLimitCcyAmount) {
        SettleLimitCcyAmount = other.SettleLimitCcyAmount;
      }
      if (other.HasSettleUtilizationAmount) {
        SettleUtilizationAmount = other.SettleUtilizationAmount;
      }
      if (other.HasSettleCurrentAmount) {
        SettleCurrentAmount = other.SettleCurrentAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SettleLimitAmount = input.ReadString();
            break;
          }
          case 18: {
            SettleType = input.ReadString();
            break;
          }
          case 26: {
            SettleLimitCcyAmount = input.ReadString();
            break;
          }
          case 34: {
            SettleUtilizationAmount = input.ReadString();
            break;
          }
          case 42: {
            SettleCurrentAmount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreditLimit : pb::IMessage<CreditLimit> {
    private static readonly pb::MessageParser<CreditLimit> _parser = new pb::MessageParser<CreditLimit>(() => new CreditLimit());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreditLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.APICreditUpdateRequestMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreditLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreditLimit(CreditLimit other) : this() {
      _hasBits0 = other._hasBits0;
      opponentOrgId_ = other.opponentOrgId_;
      hasRelation_ = other.hasRelation_;
      riskLimitAmount_ = other.riskLimitAmount_;
      riskTerm_ = other.riskTerm_;
      settleLimits_ = other.settleLimits_.Clone();
      opponentOrgCnNm_ = other.opponentOrgCnNm_;
      opponentOrgEnNm_ = other.opponentOrgEnNm_;
      riskLimitCcyAmount_ = other.riskLimitCcyAmount_;
      riskLimitUtilizationAmount_ = other.riskLimitUtilizationAmount_;
      riskLimitCurrentAmount_ = other.riskLimitCurrentAmount_;
      bClrngAmtF_ = other.bClrngAmtF_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreditLimit Clone() {
      return new CreditLimit(this);
    }

    /// <summary>Field number for the "opponent_org_id" field.</summary>
    public const int OpponentOrgIdFieldNumber = 1;
    private readonly static string OpponentOrgIdDefaultValue = "";

    private string opponentOrgId_;
    /// <summary>
    //// 对手方机构ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentOrgId {
      get { return opponentOrgId_ ?? OpponentOrgIdDefaultValue; }
      set {
        opponentOrgId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "opponent_org_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpponentOrgId {
      get { return opponentOrgId_ != null; }
    }
    /// <summary>Clears the value of the "opponent_org_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpponentOrgId() {
      opponentOrgId_ = null;
    }

    /// <summary>Field number for the "has_relation" field.</summary>
    public const int HasRelationFieldNumber = 2;
    private readonly static int HasRelationDefaultValue = 0;

    private int hasRelation_;
    /// <summary>
    //// 授信关系 1672 PartyDetailStatus
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HasRelation {
      get { if ((_hasBits0 & 1) != 0) { return hasRelation_; } else { return HasRelationDefaultValue; } }
      set {
        _hasBits0 |= 1;
        hasRelation_ = value;
      }
    }
    /// <summary>Gets whether the "has_relation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHasRelation {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "has_relation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHasRelation() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "risk_limit_amount" field.</summary>
    public const int RiskLimitAmountFieldNumber = 3;
    private readonly static string RiskLimitAmountDefaultValue = "";

    private string riskLimitAmount_;
    /// <summary>
    //// 初始交易限额（百万） 1531 RiskLimitAmount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RiskLimitAmount {
      get { return riskLimitAmount_ ?? RiskLimitAmountDefaultValue; }
      set {
        riskLimitAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "risk_limit_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRiskLimitAmount {
      get { return riskLimitAmount_ != null; }
    }
    /// <summary>Clears the value of the "risk_limit_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRiskLimitAmount() {
      riskLimitAmount_ = null;
    }

    /// <summary>Field number for the "risk_term" field.</summary>
    public const int RiskTermFieldNumber = 4;
    private readonly static string RiskTermDefaultValue = "";

    private string riskTerm_;
    /// <summary>
    //// 最长交易期限 10847 RiskTerm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RiskTerm {
      get { return riskTerm_ ?? RiskTermDefaultValue; }
      set {
        riskTerm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "risk_term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRiskTerm {
      get { return riskTerm_ != null; }
    }
    /// <summary>Clears the value of the "risk_term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRiskTerm() {
      riskTerm_ = null;
    }

    /// <summary>Field number for the "settle_limits" field.</summary>
    public const int SettleLimitsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Ctrade.Message.SettleLimit> _repeated_settleLimits_codec
        = pb::FieldCodec.ForMessage(42, global::Ctrade.Message.SettleLimit.Parser);
    private readonly pbc::RepeatedField<global::Ctrade.Message.SettleLimit> settleLimits_ = new pbc::RepeatedField<global::Ctrade.Message.SettleLimit>();
    /// <summary>
    //// 清算限额Groups
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ctrade.Message.SettleLimit> SettleLimits {
      get { return settleLimits_; }
    }

    /// <summary>Field number for the "opponent_org_cn_nm" field.</summary>
    public const int OpponentOrgCnNmFieldNumber = 6;
    private readonly static string OpponentOrgCnNmDefaultValue = "";

    private string opponentOrgCnNm_;
    /// <summary>
    //// 对手方中文简称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentOrgCnNm {
      get { return opponentOrgCnNm_ ?? OpponentOrgCnNmDefaultValue; }
      set {
        opponentOrgCnNm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "opponent_org_cn_nm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpponentOrgCnNm {
      get { return opponentOrgCnNm_ != null; }
    }
    /// <summary>Clears the value of the "opponent_org_cn_nm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpponentOrgCnNm() {
      opponentOrgCnNm_ = null;
    }

    /// <summary>Field number for the "opponent_org_en_nm" field.</summary>
    public const int OpponentOrgEnNmFieldNumber = 7;
    private readonly static string OpponentOrgEnNmDefaultValue = "";

    private string opponentOrgEnNm_;
    /// <summary>
    //// 对手方英文简称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OpponentOrgEnNm {
      get { return opponentOrgEnNm_ ?? OpponentOrgEnNmDefaultValue; }
      set {
        opponentOrgEnNm_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "opponent_org_en_nm" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOpponentOrgEnNm {
      get { return opponentOrgEnNm_ != null; }
    }
    /// <summary>Clears the value of the "opponent_org_en_nm" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOpponentOrgEnNm() {
      opponentOrgEnNm_ = null;
    }

    /// <summary>Field number for the "risk_limit_ccy_amount" field.</summary>
    public const int RiskLimitCcyAmountFieldNumber = 8;
    private readonly static string RiskLimitCcyAmountDefaultValue = "";

    private string riskLimitCcyAmount_;
    /// <summary>
    //// 初始交易限额（百万人民币）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RiskLimitCcyAmount {
      get { return riskLimitCcyAmount_ ?? RiskLimitCcyAmountDefaultValue; }
      set {
        riskLimitCcyAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "risk_limit_ccy_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRiskLimitCcyAmount {
      get { return riskLimitCcyAmount_ != null; }
    }
    /// <summary>Clears the value of the "risk_limit_ccy_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRiskLimitCcyAmount() {
      riskLimitCcyAmount_ = null;
    }

    /// <summary>Field number for the "risk_limit_utilization_amount" field.</summary>
    public const int RiskLimitUtilizationAmountFieldNumber = 9;
    private readonly static string RiskLimitUtilizationAmountDefaultValue = "";

    private string riskLimitUtilizationAmount_;
    /// <summary>
    //// 已占用清算限额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RiskLimitUtilizationAmount {
      get { return riskLimitUtilizationAmount_ ?? RiskLimitUtilizationAmountDefaultValue; }
      set {
        riskLimitUtilizationAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "risk_limit_utilization_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRiskLimitUtilizationAmount {
      get { return riskLimitUtilizationAmount_ != null; }
    }
    /// <summary>Clears the value of the "risk_limit_utilization_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRiskLimitUtilizationAmount() {
      riskLimitUtilizationAmount_ = null;
    }

    /// <summary>Field number for the "risk_limit_current_amount" field.</summary>
    public const int RiskLimitCurrentAmountFieldNumber = 10;
    private readonly static string RiskLimitCurrentAmountDefaultValue = "";

    private string riskLimitCurrentAmount_;
    /// <summary>
    //// 当前可用额度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RiskLimitCurrentAmount {
      get { return riskLimitCurrentAmount_ ?? RiskLimitCurrentAmountDefaultValue; }
      set {
        riskLimitCurrentAmount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "risk_limit_current_amount" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRiskLimitCurrentAmount {
      get { return riskLimitCurrentAmount_ != null; }
    }
    /// <summary>Clears the value of the "risk_limit_current_amount" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRiskLimitCurrentAmount() {
      riskLimitCurrentAmount_ = null;
    }

    /// <summary>Field number for the "b_clrng_amt_f" field.</summary>
    public const int BClrngAmtFFieldNumber = 11;
    private readonly static int BClrngAmtFDefaultValue = 0;

    private int bClrngAmtF_;
    /// <summary>
    //// 清算限额设置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BClrngAmtF {
      get { if ((_hasBits0 & 2) != 0) { return bClrngAmtF_; } else { return BClrngAmtFDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bClrngAmtF_ = value;
      }
    }
    /// <summary>Gets whether the "b_clrng_amt_f" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBClrngAmtF {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "b_clrng_amt_f" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBClrngAmtF() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreditLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreditLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpponentOrgId != other.OpponentOrgId) return false;
      if (HasRelation != other.HasRelation) return false;
      if (RiskLimitAmount != other.RiskLimitAmount) return false;
      if (RiskTerm != other.RiskTerm) return false;
      if(!settleLimits_.Equals(other.settleLimits_)) return false;
      if (OpponentOrgCnNm != other.OpponentOrgCnNm) return false;
      if (OpponentOrgEnNm != other.OpponentOrgEnNm) return false;
      if (RiskLimitCcyAmount != other.RiskLimitCcyAmount) return false;
      if (RiskLimitUtilizationAmount != other.RiskLimitUtilizationAmount) return false;
      if (RiskLimitCurrentAmount != other.RiskLimitCurrentAmount) return false;
      if (BClrngAmtF != other.BClrngAmtF) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOpponentOrgId) hash ^= OpponentOrgId.GetHashCode();
      if (HasHasRelation) hash ^= HasRelation.GetHashCode();
      if (HasRiskLimitAmount) hash ^= RiskLimitAmount.GetHashCode();
      if (HasRiskTerm) hash ^= RiskTerm.GetHashCode();
      hash ^= settleLimits_.GetHashCode();
      if (HasOpponentOrgCnNm) hash ^= OpponentOrgCnNm.GetHashCode();
      if (HasOpponentOrgEnNm) hash ^= OpponentOrgEnNm.GetHashCode();
      if (HasRiskLimitCcyAmount) hash ^= RiskLimitCcyAmount.GetHashCode();
      if (HasRiskLimitUtilizationAmount) hash ^= RiskLimitUtilizationAmount.GetHashCode();
      if (HasRiskLimitCurrentAmount) hash ^= RiskLimitCurrentAmount.GetHashCode();
      if (HasBClrngAmtF) hash ^= BClrngAmtF.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasOpponentOrgId) {
        output.WriteRawTag(10);
        output.WriteString(OpponentOrgId);
      }
      if (HasHasRelation) {
        output.WriteRawTag(16);
        output.WriteInt32(HasRelation);
      }
      if (HasRiskLimitAmount) {
        output.WriteRawTag(26);
        output.WriteString(RiskLimitAmount);
      }
      if (HasRiskTerm) {
        output.WriteRawTag(34);
        output.WriteString(RiskTerm);
      }
      settleLimits_.WriteTo(output, _repeated_settleLimits_codec);
      if (HasOpponentOrgCnNm) {
        output.WriteRawTag(50);
        output.WriteString(OpponentOrgCnNm);
      }
      if (HasOpponentOrgEnNm) {
        output.WriteRawTag(58);
        output.WriteString(OpponentOrgEnNm);
      }
      if (HasRiskLimitCcyAmount) {
        output.WriteRawTag(66);
        output.WriteString(RiskLimitCcyAmount);
      }
      if (HasRiskLimitUtilizationAmount) {
        output.WriteRawTag(74);
        output.WriteString(RiskLimitUtilizationAmount);
      }
      if (HasRiskLimitCurrentAmount) {
        output.WriteRawTag(82);
        output.WriteString(RiskLimitCurrentAmount);
      }
      if (HasBClrngAmtF) {
        output.WriteRawTag(88);
        output.WriteInt32(BClrngAmtF);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOpponentOrgId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpponentOrgId);
      }
      if (HasHasRelation) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasRelation);
      }
      if (HasRiskLimitAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskLimitAmount);
      }
      if (HasRiskTerm) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskTerm);
      }
      size += settleLimits_.CalculateSize(_repeated_settleLimits_codec);
      if (HasOpponentOrgCnNm) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpponentOrgCnNm);
      }
      if (HasOpponentOrgEnNm) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OpponentOrgEnNm);
      }
      if (HasRiskLimitCcyAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskLimitCcyAmount);
      }
      if (HasRiskLimitUtilizationAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskLimitUtilizationAmount);
      }
      if (HasRiskLimitCurrentAmount) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskLimitCurrentAmount);
      }
      if (HasBClrngAmtF) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BClrngAmtF);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreditLimit other) {
      if (other == null) {
        return;
      }
      if (other.HasOpponentOrgId) {
        OpponentOrgId = other.OpponentOrgId;
      }
      if (other.HasHasRelation) {
        HasRelation = other.HasRelation;
      }
      if (other.HasRiskLimitAmount) {
        RiskLimitAmount = other.RiskLimitAmount;
      }
      if (other.HasRiskTerm) {
        RiskTerm = other.RiskTerm;
      }
      settleLimits_.Add(other.settleLimits_);
      if (other.HasOpponentOrgCnNm) {
        OpponentOrgCnNm = other.OpponentOrgCnNm;
      }
      if (other.HasOpponentOrgEnNm) {
        OpponentOrgEnNm = other.OpponentOrgEnNm;
      }
      if (other.HasRiskLimitCcyAmount) {
        RiskLimitCcyAmount = other.RiskLimitCcyAmount;
      }
      if (other.HasRiskLimitUtilizationAmount) {
        RiskLimitUtilizationAmount = other.RiskLimitUtilizationAmount;
      }
      if (other.HasRiskLimitCurrentAmount) {
        RiskLimitCurrentAmount = other.RiskLimitCurrentAmount;
      }
      if (other.HasBClrngAmtF) {
        BClrngAmtF = other.BClrngAmtF;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OpponentOrgId = input.ReadString();
            break;
          }
          case 16: {
            HasRelation = input.ReadInt32();
            break;
          }
          case 26: {
            RiskLimitAmount = input.ReadString();
            break;
          }
          case 34: {
            RiskTerm = input.ReadString();
            break;
          }
          case 42: {
            settleLimits_.AddEntriesFrom(input, _repeated_settleLimits_codec);
            break;
          }
          case 50: {
            OpponentOrgCnNm = input.ReadString();
            break;
          }
          case 58: {
            OpponentOrgEnNm = input.ReadString();
            break;
          }
          case 66: {
            RiskLimitCcyAmount = input.ReadString();
            break;
          }
          case 74: {
            RiskLimitUtilizationAmount = input.ReadString();
            break;
          }
          case 82: {
            RiskLimitCurrentAmount = input.ReadString();
            break;
          }
          case 88: {
            BClrngAmtF = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 授信修改
  /// </summary>
  public sealed partial class APICreditUpdateRequest : pb::IMessage<APICreditUpdateRequest> {
    private static readonly pb::MessageParser<APICreditUpdateRequest> _parser = new pb::MessageParser<APICreditUpdateRequest>(() => new APICreditUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APICreditUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.APICreditUpdateRequestMsgReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APICreditUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APICreditUpdateRequest(APICreditUpdateRequest other) : this() {
      _hasBits0 = other._hasBits0;
      riskLimitReqId_ = other.riskLimitReqId_;
      marketIndicator_ = other.marketIndicator_;
      instScopeSecurityType_ = other.instScopeSecurityType_;
      riskLimitUpdateMethod_ = other.riskLimitUpdateMethod_;
      credits_ = other.credits_.Clone();
      tranTime_ = other.tranTime_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APICreditUpdateRequest Clone() {
      return new APICreditUpdateRequest(this);
    }

    /// <summary>Field number for the "risk_limit_req_id" field.</summary>
    public const int RiskLimitReqIdFieldNumber = 1;
    private readonly static string RiskLimitReqIdDefaultValue = "";

    private string riskLimitReqId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RiskLimitReqId {
      get { return riskLimitReqId_ ?? RiskLimitReqIdDefaultValue; }
      set {
        riskLimitReqId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "risk_limit_req_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRiskLimitReqId {
      get { return riskLimitReqId_ != null; }
    }
    /// <summary>Clears the value of the "risk_limit_req_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRiskLimitReqId() {
      riskLimitReqId_ = null;
    }

    /// <summary>Field number for the "market_indicator" field.</summary>
    public const int MarketIndicatorFieldNumber = 2;
    private readonly static int MarketIndicatorDefaultValue = 11;

    private int marketIndicator_;
    /// <summary>
    //// 市场标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarketIndicator {
      get { if ((_hasBits0 & 1) != 0) { return marketIndicator_; } else { return MarketIndicatorDefaultValue; } }
      set {
        _hasBits0 |= 1;
        marketIndicator_ = value;
      }
    }
    /// <summary>Gets whether the "market_indicator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarketIndicator {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "market_indicator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarketIndicator() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "inst_scope_security_type" field.</summary>
    public const int InstScopeSecurityTypeFieldNumber = 3;
    private readonly static string InstScopeSecurityTypeDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("RlhTV0FQ"), 0, 6);

    private string instScopeSecurityType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstScopeSecurityType {
      get { return instScopeSecurityType_ ?? InstScopeSecurityTypeDefaultValue; }
      set {
        instScopeSecurityType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "inst_scope_security_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInstScopeSecurityType {
      get { return instScopeSecurityType_ != null; }
    }
    /// <summary>Clears the value of the "inst_scope_security_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInstScopeSecurityType() {
      instScopeSecurityType_ = null;
    }

    /// <summary>Field number for the "risk_limit_update_method" field.</summary>
    public const int RiskLimitUpdateMethodFieldNumber = 4;
    private readonly static int RiskLimitUpdateMethodDefaultValue = 0;

    private int riskLimitUpdateMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RiskLimitUpdateMethod {
      get { if ((_hasBits0 & 2) != 0) { return riskLimitUpdateMethod_; } else { return RiskLimitUpdateMethodDefaultValue; } }
      set {
        _hasBits0 |= 2;
        riskLimitUpdateMethod_ = value;
      }
    }
    /// <summary>Gets whether the "risk_limit_update_method" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRiskLimitUpdateMethod {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "risk_limit_update_method" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRiskLimitUpdateMethod() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "credits" field.</summary>
    public const int CreditsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Ctrade.Message.CreditLimit> _repeated_credits_codec
        = pb::FieldCodec.ForMessage(42, global::Ctrade.Message.CreditLimit.Parser);
    private readonly pbc::RepeatedField<global::Ctrade.Message.CreditLimit> credits_ = new pbc::RepeatedField<global::Ctrade.Message.CreditLimit>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Ctrade.Message.CreditLimit> Credits {
      get { return credits_; }
    }

    /// <summary>Field number for the "tran_time" field.</summary>
    public const int TranTimeFieldNumber = 6;
    private readonly static string TranTimeDefaultValue = "";

    private string tranTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TranTime {
      get { return tranTime_ ?? TranTimeDefaultValue; }
      set {
        tranTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tran_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTranTime {
      get { return tranTime_ != null; }
    }
    /// <summary>Clears the value of the "tran_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTranTime() {
      tranTime_ = null;
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 100;
    private global::Ctrade.Message.User user_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ctrade.Message.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APICreditUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APICreditUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RiskLimitReqId != other.RiskLimitReqId) return false;
      if (MarketIndicator != other.MarketIndicator) return false;
      if (InstScopeSecurityType != other.InstScopeSecurityType) return false;
      if (RiskLimitUpdateMethod != other.RiskLimitUpdateMethod) return false;
      if(!credits_.Equals(other.credits_)) return false;
      if (TranTime != other.TranTime) return false;
      if (!object.Equals(User, other.User)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRiskLimitReqId) hash ^= RiskLimitReqId.GetHashCode();
      if (HasMarketIndicator) hash ^= MarketIndicator.GetHashCode();
      if (HasInstScopeSecurityType) hash ^= InstScopeSecurityType.GetHashCode();
      if (HasRiskLimitUpdateMethod) hash ^= RiskLimitUpdateMethod.GetHashCode();
      hash ^= credits_.GetHashCode();
      if (HasTranTime) hash ^= TranTime.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasRiskLimitReqId) {
        output.WriteRawTag(10);
        output.WriteString(RiskLimitReqId);
      }
      if (HasMarketIndicator) {
        output.WriteRawTag(16);
        output.WriteInt32(MarketIndicator);
      }
      if (HasInstScopeSecurityType) {
        output.WriteRawTag(26);
        output.WriteString(InstScopeSecurityType);
      }
      if (HasRiskLimitUpdateMethod) {
        output.WriteRawTag(32);
        output.WriteInt32(RiskLimitUpdateMethod);
      }
      credits_.WriteTo(output, _repeated_credits_codec);
      if (HasTranTime) {
        output.WriteRawTag(50);
        output.WriteString(TranTime);
      }
      if (user_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(User);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasRiskLimitReqId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RiskLimitReqId);
      }
      if (HasMarketIndicator) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarketIndicator);
      }
      if (HasInstScopeSecurityType) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstScopeSecurityType);
      }
      if (HasRiskLimitUpdateMethod) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RiskLimitUpdateMethod);
      }
      size += credits_.CalculateSize(_repeated_credits_codec);
      if (HasTranTime) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TranTime);
      }
      if (user_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APICreditUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasRiskLimitReqId) {
        RiskLimitReqId = other.RiskLimitReqId;
      }
      if (other.HasMarketIndicator) {
        MarketIndicator = other.MarketIndicator;
      }
      if (other.HasInstScopeSecurityType) {
        InstScopeSecurityType = other.InstScopeSecurityType;
      }
      if (other.HasRiskLimitUpdateMethod) {
        RiskLimitUpdateMethod = other.RiskLimitUpdateMethod;
      }
      credits_.Add(other.credits_);
      if (other.HasTranTime) {
        TranTime = other.TranTime;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Ctrade.Message.User();
        }
        User.MergeFrom(other.User);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RiskLimitReqId = input.ReadString();
            break;
          }
          case 16: {
            MarketIndicator = input.ReadInt32();
            break;
          }
          case 26: {
            InstScopeSecurityType = input.ReadString();
            break;
          }
          case 32: {
            RiskLimitUpdateMethod = input.ReadInt32();
            break;
          }
          case 42: {
            credits_.AddEntriesFrom(input, _repeated_credits_codec);
            break;
          }
          case 50: {
            TranTime = input.ReadString();
            break;
          }
          case 802: {
            if (user_ == null) {
              User = new global::Ctrade.Message.User();
            }
            input.ReadMessage(User);
            break;
          }
        }
      }
    }

  }

  public sealed partial class APICreditUpdateRequestMsg : pb::IMessage<APICreditUpdateRequestMsg> {
    private static readonly pb::MessageParser<APICreditUpdateRequestMsg> _parser = new pb::MessageParser<APICreditUpdateRequestMsg>(() => new APICreditUpdateRequestMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<APICreditUpdateRequestMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.APICreditUpdateRequestMsgReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APICreditUpdateRequestMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APICreditUpdateRequestMsg(APICreditUpdateRequestMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public APICreditUpdateRequestMsg Clone() {
      return new APICreditUpdateRequestMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Ctrade.Message.Header header_;
    /// <summary>
    ///TODO 待确定
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ctrade.Message.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Ctrade.Message.APICreditUpdateRequest body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ctrade.Message.APICreditUpdateRequest Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as APICreditUpdateRequestMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(APICreditUpdateRequestMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(APICreditUpdateRequestMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Ctrade.Message.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Ctrade.Message.APICreditUpdateRequest();
        }
        Body.MergeFrom(other.Body);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Ctrade.Message.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (body_ == null) {
              Body = new global::Ctrade.Message.APICreditUpdateRequest();
            }
            input.ReadMessage(Body);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
