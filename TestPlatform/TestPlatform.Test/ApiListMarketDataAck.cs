// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ApiListMarketDataAck.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ctrade.Message {

  /// <summary>Holder for reflection information generated from ApiListMarketDataAck.proto</summary>
  public static partial class ApiListMarketDataAckReflection {

    #region Descriptor
    /// <summary>File descriptor for ApiListMarketDataAck.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiListMarketDataAckReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpBcGlMaXN0TWFya2V0RGF0YUFjay5wcm90bxIOY3RyYWRlLm1lc3NhZ2Ua",
            "DnN0YW5kYXJkLnByb3RvGgxIZWFkZXIucHJvdG8i6wEKGEFwaUxpc3RNYXJr",
            "ZXREYXRhQWNrQm9keRIXCg9vcGVyYXRlX3NlcV9udW0YASACKAkSEQoJbWRf",
            "cmVxX2lkGAIgAigJEiEKGXN1YnNjcmlwdGlvbl9yZXF1ZXN0X3R5cGUYAyAC",
            "KAUSFAoMbWRfYm9va190eXBlGAQgAigFEhUKDXRyYW5zYWN0X3RpbWUYBSAC",
            "KAkSDgoGc3ltYm9sGAYgAigJEhgKEG1hcmtldF9pbmRpY2F0b3IYByACKAkS",
            "GwoTc3Vic2NyaXB0aW9uX3N0YXR1cxgIIAIoBRIMCgR0ZXh0GAkgASgJInYK",
            "FEFwaUxpc3RNYXJrZXREYXRhQWNrEiYKBmhlYWRlchgBIAEoCzIWLmN0cmFk",
            "ZS5tZXNzYWdlLkhlYWRlchI2CgRib2R5GAIgASgLMiguY3RyYWRlLm1lc3Nh",
            "Z2UuQXBpTGlzdE1hcmtldERhdGFBY2tCb2R5QlsKIGNuLmNvbS5jZmV0cy5k",
            "YXRhLmN0cmFkZS5tZXNzYWdlQhpBcGlMaXN0TWFya2V0RGF0YUFja1Byb2J1",
            "ZoK1GBlDVFJBREUtQVBJLU1BUktFVERBVEEtQUNL"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::StandardReflection.Descriptor, global::Ctrade.Message.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.ApiListMarketDataAckBody), global::Ctrade.Message.ApiListMarketDataAckBody.Parser, new[]{ "OperateSeqNum", "MdReqId", "SubscriptionRequestType", "MdBookType", "TransactTime", "Symbol", "MarketIndicator", "SubscriptionStatus", "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.ApiListMarketDataAck), global::Ctrade.Message.ApiListMarketDataAck.Parser, new[]{ "Header", "Body" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ApiListMarketDataAckBody : pb::IMessage<ApiListMarketDataAckBody> {
    private static readonly pb::MessageParser<ApiListMarketDataAckBody> _parser = new pb::MessageParser<ApiListMarketDataAckBody>(() => new ApiListMarketDataAckBody());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiListMarketDataAckBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.ApiListMarketDataAckReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiListMarketDataAckBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiListMarketDataAckBody(ApiListMarketDataAckBody other) : this() {
      _hasBits0 = other._hasBits0;
      operateSeqNum_ = other.operateSeqNum_;
      mdReqId_ = other.mdReqId_;
      subscriptionRequestType_ = other.subscriptionRequestType_;
      mdBookType_ = other.mdBookType_;
      transactTime_ = other.transactTime_;
      symbol_ = other.symbol_;
      marketIndicator_ = other.marketIndicator_;
      subscriptionStatus_ = other.subscriptionStatus_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiListMarketDataAckBody Clone() {
      return new ApiListMarketDataAckBody(this);
    }

    /// <summary>Field number for the "operate_seq_num" field.</summary>
    public const int OperateSeqNumFieldNumber = 1;
    private readonly static string OperateSeqNumDefaultValue = "";

    private string operateSeqNum_;
    /// <summary>
    /// 中心操作标识
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperateSeqNum {
      get { return operateSeqNum_ ?? OperateSeqNumDefaultValue; }
      set {
        operateSeqNum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "operate_seq_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOperateSeqNum {
      get { return operateSeqNum_ != null; }
    }
    /// <summary>Clears the value of the "operate_seq_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperateSeqNum() {
      operateSeqNum_ = null;
    }

    /// <summary>Field number for the "md_req_id" field.</summary>
    public const int MdReqIdFieldNumber = 2;
    private readonly static string MdReqIdDefaultValue = "";

    private string mdReqId_;
    /// <summary>
    /// 订阅请求ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MdReqId {
      get { return mdReqId_ ?? MdReqIdDefaultValue; }
      set {
        mdReqId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "md_req_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMdReqId {
      get { return mdReqId_ != null; }
    }
    /// <summary>Clears the value of the "md_req_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMdReqId() {
      mdReqId_ = null;
    }

    /// <summary>Field number for the "subscription_request_type" field.</summary>
    public const int SubscriptionRequestTypeFieldNumber = 3;
    private readonly static int SubscriptionRequestTypeDefaultValue = 0;

    private int subscriptionRequestType_;
    /// <summary>
    /// 订阅标识  1-订阅   2-取消订阅
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscriptionRequestType {
      get { if ((_hasBits0 & 1) != 0) { return subscriptionRequestType_; } else { return SubscriptionRequestTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        subscriptionRequestType_ = value;
      }
    }
    /// <summary>Gets whether the "subscription_request_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriptionRequestType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "subscription_request_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriptionRequestType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "md_book_type" field.</summary>
    public const int MdBookTypeFieldNumber = 4;
    private readonly static int MdBookTypeDefaultValue = 0;

    private int mdBookType_;
    /// <summary>
    /// 行情类型  1-最优价行情  2-市场深度行情  105-全市场最优价行情
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MdBookType {
      get { if ((_hasBits0 & 2) != 0) { return mdBookType_; } else { return MdBookTypeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        mdBookType_ = value;
      }
    }
    /// <summary>Gets whether the "md_book_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMdBookType {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "md_book_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMdBookType() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "transact_time" field.</summary>
    public const int TransactTimeFieldNumber = 5;
    private readonly static string TransactTimeDefaultValue = "";

    private string transactTime_;
    /// <summary>
    /// 时间戳 YYYYMMDD-HH:MM:SS或YYYYMMDD-HH:MM:SS.sss
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TransactTime {
      get { return transactTime_ ?? TransactTimeDefaultValue; }
      set {
        transactTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "transact_time" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTransactTime {
      get { return transactTime_ != null; }
    }
    /// <summary>Clears the value of the "transact_time" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransactTime() {
      transactTime_ = null;
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 6;
    private readonly static string SymbolDefaultValue = "";

    private string symbol_;
    /// <summary>
    /// 货币对
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_ ?? SymbolDefaultValue; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "symbol" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSymbol {
      get { return symbol_ != null; }
    }
    /// <summary>Clears the value of the "symbol" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSymbol() {
      symbol_ = null;
    }

    /// <summary>Field number for the "market_indicator" field.</summary>
    public const int MarketIndicatorFieldNumber = 7;
    private readonly static string MarketIndicatorDefaultValue = "";

    private string marketIndicator_;
    /// <summary>
    /// 11-外汇掉期
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MarketIndicator {
      get { return marketIndicator_ ?? MarketIndicatorDefaultValue; }
      set {
        marketIndicator_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "market_indicator" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMarketIndicator {
      get { return marketIndicator_ != null; }
    }
    /// <summary>Clears the value of the "market_indicator" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMarketIndicator() {
      marketIndicator_ = null;
    }

    /// <summary>Field number for the "subscription_status" field.</summary>
    public const int SubscriptionStatusFieldNumber = 8;
    private readonly static int SubscriptionStatusDefaultValue = 0;

    private int subscriptionStatus_;
    /// <summary>
    /// 订阅状态    0-成功    1-失败
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubscriptionStatus {
      get { if ((_hasBits0 & 4) != 0) { return subscriptionStatus_; } else { return SubscriptionStatusDefaultValue; } }
      set {
        _hasBits0 |= 4;
        subscriptionStatus_ = value;
      }
    }
    /// <summary>Gets whether the "subscription_status" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSubscriptionStatus {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "subscription_status" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSubscriptionStatus() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 9;
    private readonly static string TextDefaultValue = "";

    private string text_;
    /// <summary>
    /// 如果订阅失败，需要传输失败原因：1-Token认证不一致请重新登录  2-本方机构ID填写有误  3-本方用户ID填写有误  4-市场不存在  5-订阅要素填写有误  6-指令无效  7-指令发送频率过高  99-其他
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiListMarketDataAckBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiListMarketDataAckBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OperateSeqNum != other.OperateSeqNum) return false;
      if (MdReqId != other.MdReqId) return false;
      if (SubscriptionRequestType != other.SubscriptionRequestType) return false;
      if (MdBookType != other.MdBookType) return false;
      if (TransactTime != other.TransactTime) return false;
      if (Symbol != other.Symbol) return false;
      if (MarketIndicator != other.MarketIndicator) return false;
      if (SubscriptionStatus != other.SubscriptionStatus) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOperateSeqNum) hash ^= OperateSeqNum.GetHashCode();
      if (HasMdReqId) hash ^= MdReqId.GetHashCode();
      if (HasSubscriptionRequestType) hash ^= SubscriptionRequestType.GetHashCode();
      if (HasMdBookType) hash ^= MdBookType.GetHashCode();
      if (HasTransactTime) hash ^= TransactTime.GetHashCode();
      if (HasSymbol) hash ^= Symbol.GetHashCode();
      if (HasMarketIndicator) hash ^= MarketIndicator.GetHashCode();
      if (HasSubscriptionStatus) hash ^= SubscriptionStatus.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasOperateSeqNum) {
        output.WriteRawTag(10);
        output.WriteString(OperateSeqNum);
      }
      if (HasMdReqId) {
        output.WriteRawTag(18);
        output.WriteString(MdReqId);
      }
      if (HasSubscriptionRequestType) {
        output.WriteRawTag(24);
        output.WriteInt32(SubscriptionRequestType);
      }
      if (HasMdBookType) {
        output.WriteRawTag(32);
        output.WriteInt32(MdBookType);
      }
      if (HasTransactTime) {
        output.WriteRawTag(42);
        output.WriteString(TransactTime);
      }
      if (HasSymbol) {
        output.WriteRawTag(50);
        output.WriteString(Symbol);
      }
      if (HasMarketIndicator) {
        output.WriteRawTag(58);
        output.WriteString(MarketIndicator);
      }
      if (HasSubscriptionStatus) {
        output.WriteRawTag(64);
        output.WriteInt32(SubscriptionStatus);
      }
      if (HasText) {
        output.WriteRawTag(74);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasOperateSeqNum) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperateSeqNum);
      }
      if (HasMdReqId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MdReqId);
      }
      if (HasSubscriptionRequestType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscriptionRequestType);
      }
      if (HasMdBookType) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MdBookType);
      }
      if (HasTransactTime) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactTime);
      }
      if (HasSymbol) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (HasMarketIndicator) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MarketIndicator);
      }
      if (HasSubscriptionStatus) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubscriptionStatus);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiListMarketDataAckBody other) {
      if (other == null) {
        return;
      }
      if (other.HasOperateSeqNum) {
        OperateSeqNum = other.OperateSeqNum;
      }
      if (other.HasMdReqId) {
        MdReqId = other.MdReqId;
      }
      if (other.HasSubscriptionRequestType) {
        SubscriptionRequestType = other.SubscriptionRequestType;
      }
      if (other.HasMdBookType) {
        MdBookType = other.MdBookType;
      }
      if (other.HasTransactTime) {
        TransactTime = other.TransactTime;
      }
      if (other.HasSymbol) {
        Symbol = other.Symbol;
      }
      if (other.HasMarketIndicator) {
        MarketIndicator = other.MarketIndicator;
      }
      if (other.HasSubscriptionStatus) {
        SubscriptionStatus = other.SubscriptionStatus;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            OperateSeqNum = input.ReadString();
            break;
          }
          case 18: {
            MdReqId = input.ReadString();
            break;
          }
          case 24: {
            SubscriptionRequestType = input.ReadInt32();
            break;
          }
          case 32: {
            MdBookType = input.ReadInt32();
            break;
          }
          case 42: {
            TransactTime = input.ReadString();
            break;
          }
          case 50: {
            Symbol = input.ReadString();
            break;
          }
          case 58: {
            MarketIndicator = input.ReadString();
            break;
          }
          case 64: {
            SubscriptionStatus = input.ReadInt32();
            break;
          }
          case 74: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApiListMarketDataAck : pb::IMessage<ApiListMarketDataAck> {
    private static readonly pb::MessageParser<ApiListMarketDataAck> _parser = new pb::MessageParser<ApiListMarketDataAck>(() => new ApiListMarketDataAck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApiListMarketDataAck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.ApiListMarketDataAckReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiListMarketDataAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiListMarketDataAck(ApiListMarketDataAck other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApiListMarketDataAck Clone() {
      return new ApiListMarketDataAck(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Ctrade.Message.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ctrade.Message.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Ctrade.Message.ApiListMarketDataAckBody body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ctrade.Message.ApiListMarketDataAckBody Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApiListMarketDataAck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApiListMarketDataAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApiListMarketDataAck other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Ctrade.Message.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Ctrade.Message.ApiListMarketDataAckBody();
        }
        Body.MergeFrom(other.Body);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Ctrade.Message.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (body_ == null) {
              Body = new global::Ctrade.Message.ApiListMarketDataAckBody();
            }
            input.ReadMessage(Body);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
