// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BridgeOrderSubmitRequestMsg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Ctrade.Message {

  /// <summary>Holder for reflection information generated from BridgeOrderSubmitRequestMsg.proto</summary>
  public static partial class BridgeOrderSubmitRequestMsgReflection {

    #region Descriptor
    /// <summary>File descriptor for BridgeOrderSubmitRequestMsg.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BridgeOrderSubmitRequestMsgReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFCcmlkZ2VPcmRlclN1Ym1pdFJlcXVlc3RNc2cucHJvdG8SDmN0cmFkZS5t",
            "ZXNzYWdlGg5zdGFuZGFyZC5wcm90bxoMSGVhZGVyLnByb3RvIvABChhCcmlk",
            "Z2VPcmRlclN1Ym1pdFJlcXVlc3QSEQoJZW50eUlkeE5vGAEgAigFEhAKCG9y",
            "ZHJTaWRlGAIgAigFEg8KB3ByZGN0SWQYAyACKAMSEQoJb3Jkck9yZ0lkGAQg",
            "AigFEhEKCWJyZGdPcmdJZBgFIAIoBRIcChRicmRnT3JnRGVmbHREZWFsZXJJ",
            "ZBgGIAIoBRIRCglicmlkZ2VGZWUYByACKAUSEAoIcHJkY3RTZXQYCCACKAUS",
            "DwoHYnJkZ1ByYxgJIAIoAxIQCghicmRnQW1udBgKIAIoAxISCgpvcmRyQmtT",
            "bG90GAsgAigDIn0KG0JyaWRnZU9yZGVyU3VibWl0UmVxdWVzdE1zZxImCgZo",
            "ZWFkZXIYASABKAsyFi5jdHJhZGUubWVzc2FnZS5IZWFkZXISNgoEYm9keRgC",
            "IAEoCzIoLmN0cmFkZS5tZXNzYWdlLkJyaWRnZU9yZGVyU3VibWl0UmVxdWVz",
            "dEJgCiBjbi5jb20uY2ZldHMuZGF0YS5jdHJhZGUubWVzc2FnZUIgQmlkZ2VP",
            "cmRlclN1Ym1pdFJlcXVlc3RNc2dQcm9idWaCtRgYQ1RSQURFLU9SREVSLURB",
            "VEEtU1VCTUlU"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::StandardReflection.Descriptor, global::Ctrade.Message.HeaderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.BridgeOrderSubmitRequest), global::Ctrade.Message.BridgeOrderSubmitRequest.Parser, new[]{ "EntyIdxNo", "OrdrSide", "PrdctId", "OrdrOrgId", "BrdgOrgId", "BrdgOrgDefltDealerId", "BridgeFee", "PrdctSet", "BrdgPrc", "BrdgAmnt", "OrdrBkSlot" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Ctrade.Message.BridgeOrderSubmitRequestMsg), global::Ctrade.Message.BridgeOrderSubmitRequestMsg.Parser, new[]{ "Header", "Body" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///订单提交请求
  /// </summary>
  public sealed partial class BridgeOrderSubmitRequest : pb::IMessage<BridgeOrderSubmitRequest> {
    private static readonly pb::MessageParser<BridgeOrderSubmitRequest> _parser = new pb::MessageParser<BridgeOrderSubmitRequest>(() => new BridgeOrderSubmitRequest());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BridgeOrderSubmitRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.BridgeOrderSubmitRequestMsgReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BridgeOrderSubmitRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BridgeOrderSubmitRequest(BridgeOrderSubmitRequest other) : this() {
      _hasBits0 = other._hasBits0;
      entyIdxNo_ = other.entyIdxNo_;
      ordrSide_ = other.ordrSide_;
      prdctId_ = other.prdctId_;
      ordrOrgId_ = other.ordrOrgId_;
      brdgOrgId_ = other.brdgOrgId_;
      brdgOrgDefltDealerId_ = other.brdgOrgDefltDealerId_;
      bridgeFee_ = other.bridgeFee_;
      prdctSet_ = other.prdctSet_;
      brdgPrc_ = other.brdgPrc_;
      brdgAmnt_ = other.brdgAmnt_;
      ordrBkSlot_ = other.ordrBkSlot_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BridgeOrderSubmitRequest Clone() {
      return new BridgeOrderSubmitRequest(this);
    }

    /// <summary>Field number for the "entyIdxNo" field.</summary>
    public const int EntyIdxNoFieldNumber = 1;
    private readonly static int EntyIdxNoDefaultValue = 0;

    private int entyIdxNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntyIdxNo {
      get { if ((_hasBits0 & 1) != 0) { return entyIdxNo_; } else { return EntyIdxNoDefaultValue; } }
      set {
        _hasBits0 |= 1;
        entyIdxNo_ = value;
      }
    }
    /// <summary>Gets whether the "entyIdxNo" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEntyIdxNo {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "entyIdxNo" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEntyIdxNo() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "ordrSide" field.</summary>
    public const int OrdrSideFieldNumber = 2;
    private readonly static int OrdrSideDefaultValue = 0;

    private int ordrSide_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrdrSide {
      get { if ((_hasBits0 & 2) != 0) { return ordrSide_; } else { return OrdrSideDefaultValue; } }
      set {
        _hasBits0 |= 2;
        ordrSide_ = value;
      }
    }
    /// <summary>Gets whether the "ordrSide" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrdrSide {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "ordrSide" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrdrSide() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "prdctId" field.</summary>
    public const int PrdctIdFieldNumber = 3;
    private readonly static long PrdctIdDefaultValue = 0L;

    private long prdctId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PrdctId {
      get { if ((_hasBits0 & 4) != 0) { return prdctId_; } else { return PrdctIdDefaultValue; } }
      set {
        _hasBits0 |= 4;
        prdctId_ = value;
      }
    }
    /// <summary>Gets whether the "prdctId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrdctId {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "prdctId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrdctId() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "ordrOrgId" field.</summary>
    public const int OrdrOrgIdFieldNumber = 4;
    private readonly static int OrdrOrgIdDefaultValue = 0;

    private int ordrOrgId_;
    /// <summary>
    ///桥机会对应实单提单机构
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrdrOrgId {
      get { if ((_hasBits0 & 8) != 0) { return ordrOrgId_; } else { return OrdrOrgIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        ordrOrgId_ = value;
      }
    }
    /// <summary>Gets whether the "ordrOrgId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrdrOrgId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "ordrOrgId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrdrOrgId() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "brdgOrgId" field.</summary>
    public const int BrdgOrgIdFieldNumber = 5;
    private readonly static int BrdgOrgIdDefaultValue = 0;

    private int brdgOrgId_;
    /// <summary>
    ///搭桥机构
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrdgOrgId {
      get { if ((_hasBits0 & 16) != 0) { return brdgOrgId_; } else { return BrdgOrgIdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        brdgOrgId_ = value;
      }
    }
    /// <summary>Gets whether the "brdgOrgId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrdgOrgId {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "brdgOrgId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrdgOrgId() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "brdgOrgDefltDealerId" field.</summary>
    public const int BrdgOrgDefltDealerIdFieldNumber = 6;
    private readonly static int BrdgOrgDefltDealerIdDefaultValue = 0;

    private int brdgOrgDefltDealerId_;
    /// <summary>
    ///桥机构默认交易员
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BrdgOrgDefltDealerId {
      get { if ((_hasBits0 & 32) != 0) { return brdgOrgDefltDealerId_; } else { return BrdgOrgDefltDealerIdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        brdgOrgDefltDealerId_ = value;
      }
    }
    /// <summary>Gets whether the "brdgOrgDefltDealerId" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrdgOrgDefltDealerId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "brdgOrgDefltDealerId" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrdgOrgDefltDealerId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "bridgeFee" field.</summary>
    public const int BridgeFeeFieldNumber = 7;
    private readonly static int BridgeFeeDefaultValue = 0;

    private int bridgeFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BridgeFee {
      get { if ((_hasBits0 & 64) != 0) { return bridgeFee_; } else { return BridgeFeeDefaultValue; } }
      set {
        _hasBits0 |= 64;
        bridgeFee_ = value;
      }
    }
    /// <summary>Gets whether the "bridgeFee" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBridgeFee {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "bridgeFee" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBridgeFee() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "prdctSet" field.</summary>
    public const int PrdctSetFieldNumber = 8;
    private readonly static int PrdctSetDefaultValue = 0;

    private int prdctSet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PrdctSet {
      get { if ((_hasBits0 & 128) != 0) { return prdctSet_; } else { return PrdctSetDefaultValue; } }
      set {
        _hasBits0 |= 128;
        prdctSet_ = value;
      }
    }
    /// <summary>Gets whether the "prdctSet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrdctSet {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "prdctSet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrdctSet() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "brdgPrc" field.</summary>
    public const int BrdgPrcFieldNumber = 9;
    private readonly static long BrdgPrcDefaultValue = 0L;

    private long brdgPrc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BrdgPrc {
      get { if ((_hasBits0 & 256) != 0) { return brdgPrc_; } else { return BrdgPrcDefaultValue; } }
      set {
        _hasBits0 |= 256;
        brdgPrc_ = value;
      }
    }
    /// <summary>Gets whether the "brdgPrc" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrdgPrc {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "brdgPrc" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrdgPrc() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "brdgAmnt" field.</summary>
    public const int BrdgAmntFieldNumber = 10;
    private readonly static long BrdgAmntDefaultValue = 0L;

    private long brdgAmnt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BrdgAmnt {
      get { if ((_hasBits0 & 512) != 0) { return brdgAmnt_; } else { return BrdgAmntDefaultValue; } }
      set {
        _hasBits0 |= 512;
        brdgAmnt_ = value;
      }
    }
    /// <summary>Gets whether the "brdgAmnt" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBrdgAmnt {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "brdgAmnt" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBrdgAmnt() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "ordrBkSlot" field.</summary>
    public const int OrdrBkSlotFieldNumber = 11;
    private readonly static long OrdrBkSlotDefaultValue = 0L;

    private long ordrBkSlot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long OrdrBkSlot {
      get { if ((_hasBits0 & 1024) != 0) { return ordrBkSlot_; } else { return OrdrBkSlotDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        ordrBkSlot_ = value;
      }
    }
    /// <summary>Gets whether the "ordrBkSlot" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOrdrBkSlot {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "ordrBkSlot" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOrdrBkSlot() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BridgeOrderSubmitRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BridgeOrderSubmitRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntyIdxNo != other.EntyIdxNo) return false;
      if (OrdrSide != other.OrdrSide) return false;
      if (PrdctId != other.PrdctId) return false;
      if (OrdrOrgId != other.OrdrOrgId) return false;
      if (BrdgOrgId != other.BrdgOrgId) return false;
      if (BrdgOrgDefltDealerId != other.BrdgOrgDefltDealerId) return false;
      if (BridgeFee != other.BridgeFee) return false;
      if (PrdctSet != other.PrdctSet) return false;
      if (BrdgPrc != other.BrdgPrc) return false;
      if (BrdgAmnt != other.BrdgAmnt) return false;
      if (OrdrBkSlot != other.OrdrBkSlot) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEntyIdxNo) hash ^= EntyIdxNo.GetHashCode();
      if (HasOrdrSide) hash ^= OrdrSide.GetHashCode();
      if (HasPrdctId) hash ^= PrdctId.GetHashCode();
      if (HasOrdrOrgId) hash ^= OrdrOrgId.GetHashCode();
      if (HasBrdgOrgId) hash ^= BrdgOrgId.GetHashCode();
      if (HasBrdgOrgDefltDealerId) hash ^= BrdgOrgDefltDealerId.GetHashCode();
      if (HasBridgeFee) hash ^= BridgeFee.GetHashCode();
      if (HasPrdctSet) hash ^= PrdctSet.GetHashCode();
      if (HasBrdgPrc) hash ^= BrdgPrc.GetHashCode();
      if (HasBrdgAmnt) hash ^= BrdgAmnt.GetHashCode();
      if (HasOrdrBkSlot) hash ^= OrdrBkSlot.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HasEntyIdxNo) {
        output.WriteRawTag(8);
        output.WriteInt32(EntyIdxNo);
      }
      if (HasOrdrSide) {
        output.WriteRawTag(16);
        output.WriteInt32(OrdrSide);
      }
      if (HasPrdctId) {
        output.WriteRawTag(24);
        output.WriteInt64(PrdctId);
      }
      if (HasOrdrOrgId) {
        output.WriteRawTag(32);
        output.WriteInt32(OrdrOrgId);
      }
      if (HasBrdgOrgId) {
        output.WriteRawTag(40);
        output.WriteInt32(BrdgOrgId);
      }
      if (HasBrdgOrgDefltDealerId) {
        output.WriteRawTag(48);
        output.WriteInt32(BrdgOrgDefltDealerId);
      }
      if (HasBridgeFee) {
        output.WriteRawTag(56);
        output.WriteInt32(BridgeFee);
      }
      if (HasPrdctSet) {
        output.WriteRawTag(64);
        output.WriteInt32(PrdctSet);
      }
      if (HasBrdgPrc) {
        output.WriteRawTag(72);
        output.WriteInt64(BrdgPrc);
      }
      if (HasBrdgAmnt) {
        output.WriteRawTag(80);
        output.WriteInt64(BrdgAmnt);
      }
      if (HasOrdrBkSlot) {
        output.WriteRawTag(88);
        output.WriteInt64(OrdrBkSlot);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasEntyIdxNo) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntyIdxNo);
      }
      if (HasOrdrSide) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrdrSide);
      }
      if (HasPrdctId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PrdctId);
      }
      if (HasOrdrOrgId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OrdrOrgId);
      }
      if (HasBrdgOrgId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrdgOrgId);
      }
      if (HasBrdgOrgDefltDealerId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrdgOrgDefltDealerId);
      }
      if (HasBridgeFee) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BridgeFee);
      }
      if (HasPrdctSet) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PrdctSet);
      }
      if (HasBrdgPrc) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BrdgPrc);
      }
      if (HasBrdgAmnt) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BrdgAmnt);
      }
      if (HasOrdrBkSlot) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OrdrBkSlot);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BridgeOrderSubmitRequest other) {
      if (other == null) {
        return;
      }
      if (other.HasEntyIdxNo) {
        EntyIdxNo = other.EntyIdxNo;
      }
      if (other.HasOrdrSide) {
        OrdrSide = other.OrdrSide;
      }
      if (other.HasPrdctId) {
        PrdctId = other.PrdctId;
      }
      if (other.HasOrdrOrgId) {
        OrdrOrgId = other.OrdrOrgId;
      }
      if (other.HasBrdgOrgId) {
        BrdgOrgId = other.BrdgOrgId;
      }
      if (other.HasBrdgOrgDefltDealerId) {
        BrdgOrgDefltDealerId = other.BrdgOrgDefltDealerId;
      }
      if (other.HasBridgeFee) {
        BridgeFee = other.BridgeFee;
      }
      if (other.HasPrdctSet) {
        PrdctSet = other.PrdctSet;
      }
      if (other.HasBrdgPrc) {
        BrdgPrc = other.BrdgPrc;
      }
      if (other.HasBrdgAmnt) {
        BrdgAmnt = other.BrdgAmnt;
      }
      if (other.HasOrdrBkSlot) {
        OrdrBkSlot = other.OrdrBkSlot;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntyIdxNo = input.ReadInt32();
            break;
          }
          case 16: {
            OrdrSide = input.ReadInt32();
            break;
          }
          case 24: {
            PrdctId = input.ReadInt64();
            break;
          }
          case 32: {
            OrdrOrgId = input.ReadInt32();
            break;
          }
          case 40: {
            BrdgOrgId = input.ReadInt32();
            break;
          }
          case 48: {
            BrdgOrgDefltDealerId = input.ReadInt32();
            break;
          }
          case 56: {
            BridgeFee = input.ReadInt32();
            break;
          }
          case 64: {
            PrdctSet = input.ReadInt32();
            break;
          }
          case 72: {
            BrdgPrc = input.ReadInt64();
            break;
          }
          case 80: {
            BrdgAmnt = input.ReadInt64();
            break;
          }
          case 88: {
            OrdrBkSlot = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BridgeOrderSubmitRequestMsg : pb::IMessage<BridgeOrderSubmitRequestMsg> {
    private static readonly pb::MessageParser<BridgeOrderSubmitRequestMsg> _parser = new pb::MessageParser<BridgeOrderSubmitRequestMsg>(() => new BridgeOrderSubmitRequestMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BridgeOrderSubmitRequestMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Ctrade.Message.BridgeOrderSubmitRequestMsgReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BridgeOrderSubmitRequestMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BridgeOrderSubmitRequestMsg(BridgeOrderSubmitRequestMsg other) : this() {
      header_ = other.header_ != null ? other.header_.Clone() : null;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BridgeOrderSubmitRequestMsg Clone() {
      return new BridgeOrderSubmitRequestMsg(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private global::Ctrade.Message.Header header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ctrade.Message.Header Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 2;
    private global::Ctrade.Message.BridgeOrderSubmitRequest body_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Ctrade.Message.BridgeOrderSubmitRequest Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BridgeOrderSubmitRequestMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BridgeOrderSubmitRequestMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Header, other.Header)) return false;
      if (!object.Equals(Body, other.Body)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (header_ != null) hash ^= Header.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (header_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Header);
      }
      if (body_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Body);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BridgeOrderSubmitRequestMsg other) {
      if (other == null) {
        return;
      }
      if (other.header_ != null) {
        if (header_ == null) {
          Header = new global::Ctrade.Message.Header();
        }
        Header.MergeFrom(other.Header);
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::Ctrade.Message.BridgeOrderSubmitRequest();
        }
        Body.MergeFrom(other.Body);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (header_ == null) {
              Header = new global::Ctrade.Message.Header();
            }
            input.ReadMessage(Header);
            break;
          }
          case 18: {
            if (body_ == null) {
              Body = new global::Ctrade.Message.BridgeOrderSubmitRequest();
            }
            input.ReadMessage(Body);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
